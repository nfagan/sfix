function state = randomized_fixation(program, conf)

state = ptb.State();
state.Name = 'randomized_fixation';
state.Duration = conf.TIMINGS.time_in.randomized_fixation;

state.Entry = @(state) entry(state, program);
state.Loop = @(state) loop(state, program);
state.Exit = @(state) exit(state, program);

end

function entry(state, program)

state.UserData.acquired = false;
state.UserData.entered = false;
state.UserData.broke = false;
state.UserData.draw_stimulus = true;

stimuli = program.Value.stimuli;
targets = program.Value.targets;
window = program.Value.window;

dur_range = ...
  program.Value.stimuli_setup.randomized_fixation.target_duration_range;

configure_target( stimuli

targ_dur = (dur_range(2) - dur_range(1)) * rand() + dur_range(1);
targets.randomized_fixation.Duration = targ_dur;

reset( targets.randomized_fixation );
draw( stimuli.randomized_fixation, window );
flip( window );

end

function loop(state, program)

targ = program.Value.targets.randomized_fixation;

if ( target.DurationMet )
  state.UserData.acquired = true;
  state.UserData.draw_stimulus = false;
  
elseif ( targ.IsInBounds )
  state.UserData.entered = true;
  
elseif ( state.UserData.entered )
  state.UserData.broke = true;
end

if ( ~state.UserData.draw_stimulus )
  flip( program.Value.window );
end

end

function exit(state, program)

states = program.Value.states;
next( state, states('new_trial') );

end

function configure_target(stimulus, target)



end